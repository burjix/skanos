// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  avatar    String?
  isActive  Boolean  @default(true)
  otpSecret String?
  
  // Onboarding fields
  onboardingCompleted Boolean  @default(false)
  onboardingStep      Int      @default(0)
  onboardingData      Json     @default("{}")
  
  // Goal settings for each pillar
  healthGoals         Json     @default("{}")
  wealthGoals         Json     @default("{}")
  spiritualityGoals   Json     @default("{}")
  
  // Daily checkup preferences
  dailyCheckupEnabled Boolean  @default(true)
  dailyCheckupTime    String?  @default("09:00")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sessions    Session[]
  events      Event[]
  entities    Entity[]
  memories    Memory[]
  pillars     Pillar[]
  quickNotes  QuickNote[]
  insights    Insight[]

  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Event {
  id          String          @id @default(cuid())
  type        String // capture, insight, health_metric, etc.
  title       String
  description String?
  data        Json // flexible event data
  source      String // web, mobile, automation, etc.
  priority    Int             @default(0)
  status      String          @default("active") // active, archived, deleted
  userId      String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  entityEvents EntityEvent[]
  insights     Insight[]

  @@index([userId, type, createdAt])
  @@index([userId, status, createdAt])
  @@map("events")
}

model Entity {
  id          String   @id @default(cuid())
  name        String
  type        String // person, place, concept, goal, habit, etc.
  description String?
  metadata    Json     @default("{}")
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  entityEvents EntityEvent[]
  relationships Relationship[] @relation("EntityFrom")
  relatedTo     Relationship[] @relation("EntityTo")
  memories      Memory[]
  insights      Insight[]

  @@unique([userId, name, type])
  @@index([userId, type])
  @@map("entities")
}

model EntityEvent {
  id       String @id @default(cuid())
  entityId String
  eventId  String

  entity Entity @relation(fields: [entityId], references: [id], onDelete: Cascade)
  event  Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([entityId, eventId])
  @@map("entity_events")
}

model Relationship {
  id         String   @id @default(cuid())
  fromId     String
  toId       String
  type       String // friend, mentor, goal_for, habit_of, etc.
  strength   Float    @default(0.5) // 0.0 to 1.0
  metadata   Json     @default("{}")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  from Entity @relation("EntityFrom", fields: [fromId], references: [id], onDelete: Cascade)
  to   Entity @relation("EntityTo", fields: [toId], references: [id], onDelete: Cascade)

  @@unique([fromId, toId, type])
  @@map("relationships")
}

model Memory {
  id          String                     @id @default(cuid())
  content     String
  embedding   String? // OpenAI ada-002 embeddings (JSON string for now)
  type        String                     @default("general") // episodic, semantic, working
  importance  Float                      @default(0.5)
  userId      String
  entityId    String?
  createdAt   DateTime                   @default(now())
  updatedAt   DateTime                   @updatedAt

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  entity Entity? @relation(fields: [entityId], references: [id], onDelete: SetNull)

  @@index([userId, type])
  @@index([userId, importance])
  @@map("memories")
}

model Pillar {
  id          String   @id @default(cuid())
  name        String // Health, Wealth, Spirituality, etc.
  description String?
  color       String   @default("#000000")
  icon        String?
  order       Int      @default(0)
  isActive    Boolean  @default(true)
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  insights Insight[]

  @@unique([userId, name])
  @@map("pillars")
}

model QuickNote {
  id          String   @id @default(cuid())
  content     String
  processed   Boolean  @default(false)
  extractedAt DateTime?
  userId      String
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, processed])
  @@map("quick_notes")
}

model Insight {
  id          String                     @id @default(cuid())
  title       String
  content     String
  type        String // pattern, correlation, recommendation, etc.
  confidence  Float                      @default(0.5)
  embedding   String? 
  userId      String
  pillarId    String?
  entityId    String?
  eventId     String?
  createdAt   DateTime                   @default(now())

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  pillar Pillar? @relation(fields: [pillarId], references: [id], onDelete: SetNull)
  entity Entity? @relation(fields: [entityId], references: [id], onDelete: SetNull)
  event  Event?  @relation(fields: [eventId], references: [id], onDelete: SetNull)

  @@index([userId, type])
  @@index([userId, confidence])
  @@map("insights")
}